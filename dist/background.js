(()=>{"use strict";function t(t){return new Promise(((e,n)=>{chrome.tabs.query(t,(t=>{e(t)}))}))}let e;chrome.runtime.onStartup.addListener((()=>{console.log("startup listener fired")})),void 0===e&&chrome.storage.local.get("domainGroupIdList",(t=>{e=t.domainGroupIdList||[]})),chrome.storage.onChanged.addListener(((t,n)=>{t?.domainGroupIdList&&(e=t.domainGroupIdList.newValue)})),chrome.action.onClicked.addListener((async function(){let n=(await t({currentWindow:!0})).reduce(((t,e)=>{const n=new URL(e.url).hostname,o=t.find((t=>t.hostname===n));return o?o.tabs.push(e):t.push({hostname:n,tabs:[e]}),t}),[]);n=function(t){return t.filter((t=>t.tabs.length>1))}(n),n.forEach((async n=>{const o=n.hostname,r={},a=function(t){return e.find((e=>e.hostname===t))?.groupId}(o),s=await async function(e){return(await t({})).filter((t=>t.groupId===e)).length>0}(a);a&&(s&&(r.groupId=a),s||function(t){const n=e.findIndex((e=>e.groupId===t));e.splice(n,1)}(a)),r.tabIds=n.tabs.map((t=>t.id));const i=await(u=r,new Promise(((t,e)=>{chrome.tabs.group(u,(e=>{t(e)}))})));var u;a&&s||(e.push({hostname:o,groupId:i}),chrome.tabGroups.update(i,{collapsed:!0,title:o}))})),await function(t){return new Promise(((e,n)=>{chrome.storage.local.set({domainGroupIdList:t},(()=>{e()}))}))}(e)}))})();